{"version":3,"file":"static/webpack/static/development/pages/index.js.8b75d8d97c66ef133761.hot-update.js","sources":["webpack:///./components/EstimateCard.js"],"sourcesContent":["import React from 'react';\n\nimport { useSelector, shallowEqual } from 'react-redux';\n\nimport {\n    Card, CardBody, CardHeader, CardText, Col, Row, Alert,\n} from 'reactstrap';\n\nconst useState = () => {\n    const state = useSelector(\n        ({\n            filingStatus, incomeAmount, numOfChildren, dependentStatus,\n        }) => {\n            return {\n                filingStatus,\n                numOfChildren,\n                incomeAmount,\n                dependentStatus,\n            };\n        },\n        shallowEqual,\n    );\n\n    return { state };\n};\n\nconst EstimateCard = () => {\n\n    const { state } = useState();\n\n    const filingStatusType = {\n        SINGLE: 1,\n        MARRIED: 2,\n        HEAD_OF_HOUSEHOLD: 3,\n    };\n\n    function parseAmountForDisplay(amount) {\n        // Can't get less than $0 unless :yin: is President\n        let amountOutput = amount;\n        if (amount < 1) {\n            amountOutput = 0;\n        }\n        return amountOutput;\n    }\n\n    function getAmounts(data) {\n\n        // Default values for filing status Single\n        let baseAmount = 1200;\n        let excessLimit = 75000;\n        let maxLimit = 99000;\n\n        if (data.filingStatus === filingStatusType.HEAD_OF_HOUSEHOLD) {\n            baseAmount = 1200;\n            excessLimit = 112500;\n            maxLimit = 136500;\n        } else if (data.filingStatus === filingStatusType.MARRIED) {\n            baseAmount = 2400;\n            excessLimit = 150000;\n            maxLimit = 198000;\n        }\n\n        let amountForIncome = baseAmount;\n        let amountForChildren = (data.numOfChildren * 500);\n        const startingTotal = amountForIncome + amountForChildren;\n        let excessIncomeDiff = 0;\n\n        // Subtract $5 for every $100 in excess income\n        if (data.incomeAmount > excessLimit) {\n            const excessIncomeAmnt = data.incomeAmount - excessLimit;\n            excessIncomeDiff = (excessIncomeAmnt / 100) * 5;\n        }\n\n        let totalAmount = (startingTotal - excessIncomeDiff);\n\n        // This is probably not 100% correct way to do things but not a big deal I think\n        // Main goal is to show how much parents get for their children\n        if (data.incomeAmount > excessLimit) {\n            amountForIncome = totalAmount - amountForChildren;\n        }\n        if (data.incomeAmount > maxLimit) {\n            amountForIncome = 0;\n            amountForChildren = totalAmount;\n        }\n\n        if (data.dependentStatus === 1) {\n            // You don't get anything if you were claimed as a dependent\n            // Survey says, that sucks\n            totalAmount = 0;\n            amountForIncome = 0;\n            amountForChildren = 0;\n        }\n\n        return {\n            totalAmount,\n            amountForIncome,\n            amountForChildren,\n        };\n    }\n\n    const allAmounts = getAmounts(state);\n    const amountForIncome = parseAmountForDisplay(allAmounts.amountForIncome);\n    const amountForChildren = parseAmountForDisplay(allAmounts.amountForChildren);\n    const totalAmount = parseAmountForDisplay(allAmounts.totalAmount);\n\n    return (\n        <div>\n            <Card>\n                <CardHeader>Payment Estimate</CardHeader>\n                <CardBody>\n                    <Row className={ 'your-money-cards justify-content-center' }>\n                        <Col sm=\"3 align-self-center\">\n                            <Card body className=\"your-money-total\">\n                                <h5>Total ðŸ’µ</h5>\n                                <CardText className={ 'total-stimulus' }>${totalAmount}</CardText>\n                            </Card>\n                        </Col>\n\n                        <Col sm=\"1 align-self-center\">\n                            <span className={ 'your-money-sign' }>=</span>\n                        </Col>\n\n                        <Col sm=\"3 align-self-center\">\n                            <Card body className={ '' }>\n                                <h6 className={ 'your-money-info-title' }>Based on Income</h6>\n                                <CardText className={ 'your-money-info-amount' }>${amountForIncome}</CardText>\n                            </Card>\n                        </Col>\n\n                        <Col sm=\"1 align-self-center\">\n                            <span className={ 'your-money-sign' }>+</span>\n                        </Col>\n\n                        <Col sm=\"3 align-self-center\">\n                            <Card body className={ '' }>\n                                <h6 className={ 'your-money-info-title' }>Based on Children</h6>\n                                <CardText className={ 'your-money-info-amount' }>${amountForChildren}</CardText>\n                            </Card>\n                        </Col>\n\n                    </Row>\n\n                </CardBody>\n            </Card>\n\n\n            <Alert color=\"secondary\" style={ { marginTop: '18px' } }>\n                Like the idea of direct cash for individuals? Consider supporting&nbsp;\n                <b><a href=\"https://movehumanityforward.com/\" target=\"_blank\" rel='noreferrer noopener'>a UBI non-profit (Humanity Forward)</a></b>\n                .\n            </Alert>\n\n        </div>\n    );\n};\n\nexport default EstimateCard;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AAGA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAIA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;A","sourceRoot":""}